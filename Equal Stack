
/*
  problem : hacker rank ds/stack/equal stack
  
      You have three stacks of cylinders where each cylinder has the same diameter, but they may vary in height. You can change the height of a stack by removing and discarding its topmost cylinder any number of times.

Find the maximum possible height of the stacks such that all of the stacks are exactly the same height. This means you must remove zero or more cylinders from the top of zero or more of the three stacks until they're all the same height, then print the height. The removals must be performed in such a way as to maximize the height.

Note: An empty stack is still a stack.

*/
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;

int main(){
    int n1;
    int n2;
    int n3;
    int h1_i,h2_i,h3_i;
    int s1=0,s2=0,s3=0;
    
    cin >> n1 >> n2 >> n3;
    vector<int> h1(n1);
    for(h1_i = 0;h1_i < n1;h1_i++){
       cin >> h1[h1_i];
        s1+=h1[h1_i];
    }
    vector<int> h2(n2);
    for(h2_i = 0;h2_i < n2;h2_i++){
       cin >> h2[h2_i];
        s2+=h2[h2_i];
    }
    vector<int> h3(n3);
    for(h3_i = 0;h3_i < n3;h3_i++){
       cin >> h3[h3_i];
        s3+=h3[h3_i];
    }
    h1_i=0,h2_i=0,h3_i=0;
    
    int max = (s1<s2 && s1<s3 )?s1:(s2<s3)?s2:s3;
    
    while(max>0){
        int max = (s1<s2 && s1<s3)?s1:(s2<s3)?s2:s3;
    
        if(s1== s2 && s2==s3)
            break;
        
        if(s1>max){
            s1-=h1[h1_i++];        
        }
        if(s2>max){
            s2-=h2[h2_i++];
        }
        if(s3>max){
            s3-=h3[h3_i++];
        }
    }
        
    cout<<s1;
    return 0;
}
